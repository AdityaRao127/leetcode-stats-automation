name: Sync Leetcode

on:
  workflow_dispatch:
  schedule:
    - cron: "45 22 * * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  

      - name: Sync LeetCode Solutions
        id: sync_leetcode
        uses: joshcai/leetcode-sync@v1.7
        with:
          github-token: ${{ github.token }}
          leetcode-csrf-token: ${{ secrets.LEETCODE_CSRF_TOKEN }}
          leetcode-session: ${{ secrets.LEETCODE_SESSION }}
          destination-folder: temp_solutions
          verbose: true

      - name: Organize Solutions into Correct Folders
        run: |
          mkdir -p "Data Structures and Algorithms" "Database"
          for folder in temp_solutions/*; do
            if [ -d "$folder" ]; then
              file=$(ls "$folder")
              extension="${file##*.}"
              if [[ "$extension" == "java" || "$extension" == "py" ]]; then
                mv "$folder" "Data Structures and Algorithms/"
              elif [[ "$extension" == "sql" ]]; then
                mv "$folder" "Database/"
              fi
            fi
          done

      - name: Commit Each Solution Separately
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          for folder in "Data Structures and Algorithms" "Database"; do
            for solution in "$folder"/*; do
              if [ -d "$solution" ]; then
                LATEST_COMMIT_MSG=$(git log -1 --pretty=%B || echo "")
                
                RUNTIME_MS=$(echo "$LATEST_COMMIT_MSG" | grep -oP 'Runtime - \K\d+' || echo "0")
                MEMORY_MB=$(echo "$LATEST_COMMIT_MSG" | grep -oP 'Memory - \K\d+' || echo "0")
                RUNTIME_PCT=$(echo "$LATEST_COMMIT_MSG" | grep -oP '\(\K[0-9.]+(?=%\))' | head -1 || echo "100")
                MEMORY_PCT=$(echo "$LATEST_COMMIT_MSG" | grep -oP '\(\K[0-9.]+(?=%\))' | tail -1 || echo "100")

                if (( $(echo "$RUNTIME_PCT < 25" | bc -l) )); then RUNTIME_EMOJI="🚀"
                elif (( $(echo "$RUNTIME_PCT < 50" | bc -l) )); then RUNTIME_EMOJI="⚡"
                elif (( $(echo "$RUNTIME_PCT < 75" | bc -l) )); then RUNTIME_EMOJI="🔥"
                else RUNTIME_EMOJI="🐢"; fi

                if (( $(echo "$MEMORY_PCT < 25" | bc -l) )); then MEMORY_EMOJI="❄️"
                elif (( $(echo "$MEMORY_PCT < 50" | bc -l) )); then MEMORY_EMOJI="🌱"
                elif (( $(echo "$MEMORY_PCT < 75" | bc -l) )); then MEMORY_EMOJI="⚠️"
                else MEMORY_EMOJI="❗️"; fi

                COMMIT_MESSAGE="Runtime $RUNTIME_MS ms ($RUNTIME_PCT%) $RUNTIME_EMOJI | Memory $MEMORY_MB MB ($MEMORY_PCT%) $MEMORY_EMOJI - $(basename "$solution")"
                
                git add "$solution"
                git commit -m "$COMMIT_MESSAGE"
              fi
            done
          done

          git push
